[1mdiff --git a/final_project/neural_network/train.py b/final_project/neural_network/train.py[m
[1mindex 1d91bb2..e24aac1 100644[m
[1m--- a/final_project/neural_network/train.py[m
[1m+++ b/final_project/neural_network/train.py[m
[36m@@ -6,12 +6,17 @@[m [mfrom keras.models import Sequential, load_model[m
 from keras.layers import Dense[m
 from preprocessing.pitch_class_profiling import PitchClassProfiler[m
 from util import config[m
[32m+[m[32mimport sys[m
 [m
 class Trainer():[m
[31m-    def __init__(self, file_name="my_model.h5"):[m
[32m+[m[32m    def __init__(self, file_name="my_model.h5", seed=None):[m
         self.pitches = ["c", "d", "dm", "e", "em", "f", "g", "a", "am", "bm"][m
         self.trained = False[m
         self.file_name = file_name[m
[32m+[m[32m        self.seed = seed[m
[32m+[m
[32m+[m[32m        if seed is not None:[m
[32m+[m[32m            np.random.seed(seed)[m
 [m
     def read_pitch_csv(self, folder_name):[m
         data = pandas.DataFrame()[m
[36m@@ -63,6 +68,15 @@[m [mclass Trainer():[m
     def save(self):[m
         self.model().save(self.file_name)[m
 [m
[32m+[m[32m    def save_architecture(self):[m
[32m+[m[32m        json_string = self.model_architecture()[m
[32m+[m[32m        json_file_name = self.file_name.split(".")[0] + ".json"[m
[32m+[m[32m        with open(json_file_name, "w") as f:[m
[32m+[m[32m            f.write(json_string)[m
[32m+[m
[32m+[m[32m    def model_architecture(self):[m
[32m+[m[32m        return self.model().to_json()[m
[32m+[m
     def load(self):[m
         self._model = load_model(self.file_name)[m
         self.trained = True[m
[36m@@ -70,17 +84,24 @@[m [mclass Trainer():[m
     def train(self):[m
         self._model = Sequential()[m
         self._model.add(Dense(30, input_dim=12, activation='relu'))[m
[31m-        self._model.add(Dense(10, activation='sigmoid'))[m
[32m+[m[32m        self._model.add(Dense(10, activation='git'))[m
 [m
         X = self.input_data().values[m
         Y = self.output_data().values[m
 [m
[31m-        self._model.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])[m
[31m-        self._model.fit(X, Y, epochs=100, batch_size=10)[m
[32m+[m[32m        self._model.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])[m
[32m+[m[32m        self._model.fit(X, Y, epochs=10, batch_size=10)[m
[32m+[m
[32m+[m[32m        for i in range(3):[m
[32m+[m[32m            predict = self._model.predict(np.array([X[i]]))[m[41m [m
[32m+[m
[32m+[m[32m            print( abs ( Y[i] - predict) )[m
[32m+[m
 [m
[31m-        scores = self._model.evaluate(X, Y)[m
[31m-        print("\nResults validating with training data: %s: %.2f%%" % (self._model.metrics_names[1], scores[1]*100))[m
[32m+[m[32m        #scores = self._model.evaluate(X, Y)[m
[32m+[m[32m        #print("\nResults validating with training data: %s: %.2f%%" % (self._model.metrics_names[1], scores[1]*100))[m
         self.trained = True[m
[32m+[m[32m        #return scores[m
 [m
     def predict(self, audio_file):[m
         profiler = PitchClassProfiler(audio_file)[m
